import java.util.Stack;

public class ProgramCounter {

    public static byte currentLocation = 0;
    
    static Stack<Byte> myStack = new Stack<Byte>();

    // Fetches the instruction from memory at the current program counter
    public static byte[] getFont(char a) {

        byte[] result = new byte[5];
        int i = 0;
        int start;

        //0 (0-4)
        if (a == '0') {
            start = 0;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //1 (5-9)
        else if (a == '1') {
            start = 5;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //2 (10-14)
        else if (a == '2') {
            start = 10;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //3 (15-19)
        else if (a == '3') {
            start = 15;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //4 (20-24)
        else if (a == '4') {
            start = 20;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //5 (25-29)
        else if (a == '5') {
            start = 25;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //6 (35-39)
        else if (a == '6') {
            start = 30;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //7 (30-34)
        else if (a == '7') {
            start = 35;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //8 (35-39)
        else if (a == '8') {
            start = 40;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //9 (40-44)
        else if (a == '9') {
            start = 45;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //A (45-49)
        else if (a == 'A') {
            start = 50;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //B (50-54)
        else if (a == 'B') {
            start = 55;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //C (55-59)
        else if (a == 'C') {
            start = 60;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //D (60-64)
        else if (a == 'D') {
            start = 65;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //E (65-69)
        else if (a == 'E') {
            start = 70;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        //F (70-74)
        else if (a == 'F') {
            start = 75;
            while (i < 5) {
                result[i] = Ram.memory[start + i];
                i++;
            }
        }
        return result;
    }//private getFont

    
    public static void decode(String instruction) {

        if (instruction.charAt(0) == '0') {
            if (instruction.substring(1).equals("0E0")) {
                //clear
            } else if (instruction.substring(1).equals("0EE")) {
                myStack.pop();
            }
        } else if (instruction.charAt(0) == '1') {

            //jump to location
            currentLocation = (byte) Integer.parseInt(instruction.substring(1));

        } else if (instruction.charAt(0) == '2') {

            myStack.push(currentLocation);
            currentLocation = (byte) Integer.parseInt(instruction.substring(1));
            

        }

    }
}//end
